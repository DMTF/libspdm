name: Build

on:
  push:
    paths-ignore:
      - '**/*.md'
      - 'doc/**'
    branches:
      - main
  pull_request:
    paths-ignore:
      - 'doc/**'
      - '**/*.md'
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
        crypto:
          - mbedtls
          - openssl
        arch:
          - x64
          - ia32
        target:
          - Debug
          - Release
        toolchain:
          - GCC
          - VS2019
          - LIBFUZZER
          - CLANG
        configurations:
          - "-DLIBSPDM_ENABLE_CAPABILITY_CERT_CAP=1 -DLIBSPDM_ENABLE_CAPABILITY_CHAL_CAP=1 -DLIBSPDM_ENABLE_CAPABILITY_MEAS_CAP=1 -DLIBSPDM_ENABLE_CAPABILITY_KEY_EX_CAP=1 -DLIBSPDM_ENABLE_CAPABILITY_PSK_EX_CAP=1 -DLIBSPDM_ENABLE_CAPABILITY_SET_CERTIFICATE_CAP=1 -DLIBSPDM_ENABLE_CAPABILITY_CHUNK_CAP=1"
          - "-DLIBSPDM_ENABLE_CAPABILITY_CERT_CAP=0 -DLIBSPDM_ENABLE_CAPABILITY_CHAL_CAP=0 -DLIBSPDM_ENABLE_CAPABILITY_MEAS_CAP=0 -DLIBSPDM_ENABLE_CAPABILITY_KEY_EX_CAP=0 -DLIBSPDM_ENABLE_CAPABILITY_PSK_EX_CAP=0 -DLIBSPDM_ENABLE_CAPABILITY_SET_CERTIFICATE_CAP=0 -DLIBSPDM_ENABLE_CAPABILITY_CHUNK_CAP=0"
          - "-DLIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT=0"
          - "-DLIBSPDM_RECORD_TRANSCRIPT_DATA_SUPPORT=1"
        exclude:
          - os: ubuntu-latest
            toolchain: VS2019
          - os: ubuntu-latest
            arch: ia32
          - os: windows-latest
            toolchain: GCC
            arch: ia32
          - os: windows-latest
            toolchain: GCC
            crypto: mbedtls
          - os: windows-latest
            toolchain: LIBFUZZER
          - crypto: openssl
            arch: ia32
          - os: windows-latest
            toolchain: CLANG
    steps:
      - name: Toolchain Setup - VS2019 (x64)
        if: matrix.toolchain == 'VS2019' && matrix.arch == 'x64'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
      - name: Toolchain Setup - VS2019 (x86)
        if: matrix.toolchain == 'VS2019' && matrix.arch == 'ia32'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x86
      - name: Install Clang
        if: matrix.toolchain == 'CLANG' && matrix.os == 'ubuntu-latest' && matrix.arch == 'x64'
        uses: egor-tensin/setup-clang@v1
        with:
          version: 10
          platform: x64
      - name: Install Clang (x86)
        if: matrix.toolchain == 'CLANG' && matrix.os == 'ubuntu-latest' && matrix.arch == 'ia32'
        uses: egor-tensin/setup-clang@v1
        with:
          version: 10
          platform: x86
      - name: 'Toolchain Setup - MinGW (x64)'
        if: matrix.toolchain == 'GCC' && matrix.arch == 'x64' && matrix.os == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            git
            make
          pacboy: >-
            toolchain:p
            cmake:p
            make:p
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Build - Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install llvm
          mkdir build
          cd build
          cmake -E env CFLAGS="${{ matrix.configurations }} -DLIBSPDM_DEBUG_LIBSPDM_ASSERT_CONFIG=0" cmake -DARCH=${{ matrix.arch }} -DTOOLCHAIN=${{ matrix.toolchain }} -DTARGET=${{ matrix.target }} -DCRYPTO=${{ matrix.crypto }} ..
          make copy_sample_key
          make copy_seed
          make -j`nproc`
      - name: Build - Windows
        if: matrix.os == 'windows-latest' && matrix.toolchain != 'GCC'
        run: |
          mkdir build
          cd build
          cmake -E env CFLAGS="${{ matrix.configurations }} -DLIBSPDM_DEBUG_LIBSPDM_ASSERT_CONFIG=0" cmake -G"NMake Makefiles" -DARCH=${{ matrix.arch }} -DTOOLCHAIN=${{ matrix.toolchain }} -DTARGET=${{ matrix.target }} -DCRYPTO=${{ matrix.crypto }} ..
          nmake copy_sample_key
          nmake
      - name: Build - Windows MinGW
        if: matrix.os == 'windows-latest' && matrix.toolchain == 'GCC'
        shell: msys2 {0}
        run: |
          mkdir build
          cd build
          cmake -E env CFLAGS="${{ matrix.configurations }} -DLIBSPDM_DEBUG_LIBSPDM_ASSERT_CONFIG=0" cmake -G"MSYS Makefiles" -DARCH=${{ matrix.arch }} -DTOOLCHAIN=${{ matrix.toolchain }} -DTARGET=${{ matrix.target }} -DCRYPTO=${{ matrix.crypto }} ..
          make copy_sample_key
          make

      - name: Test Requester
        if: matrix.toolchain != 'LIBFUZZER'
        run: |
          cd build/bin
          ./test_spdm_requester
      - name: Test Responder
        if: matrix.toolchain != 'LIBFUZZER'
        run: |
          cd build/bin
          ./test_spdm_responder
      - name: Test_spdm_common
        if: matrix.toolchain != 'LIBFUZZER'
        run: |
          cd build/bin
          ./test_spdm_common
      - name: Test_spdm_crypt
        if: matrix.toolchain != 'LIBFUZZER'
        run: |
          cd build/bin
          ./test_spdm_crypt
      - name: Test with initial seed
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x64'
        run: |
          cd build/bin
          ./run_initial_seed.sh
